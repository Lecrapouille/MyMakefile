# -*- mode: makefile -*-
##==================================================================================
## MIT License
##
## Copyright (c) 2019 Quentin Quadrat <lecrapouille@gmail.com>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##==================================================================================

###################################################
# clang and GCC common compilation flags.
#
ifeq ($(CXXFLAGS),)

  # Warms about C
  ifeq ($(SUFFIX),.c)
     CXXFLAGS += -Weffc++ -Wstrict-selector-match -Wstrict-prototypes
  endif

  # Clang and GCC common flags
  CXXFLAGS += -Wall -Wextra -Wuninitialized -Wundef -Wunused		\
  -Wunused-result -Wunused-parameter -Wunused-const-variable -Wtype-limits	\
  -Wtautological-compare -Wcast-align -Wcast-qual -Wconversion -Wfloat-equal	\
  -Wpointer-arith -Wswitch-enum -pedantic -Wpacked -Wold-style-cast		\
  -Wdeprecated -Wvariadic-macros -Wvla

  # Clang specific
  ifeq ($(COMPILER_NAME),clang)
    CXXFLAGS += -Wconditional-uninitialized -Wundefined-reinterpret-cast	\
    -Wused-but-marked-unused -Wunused-member-function				\
    -Wunused-getter-return-value -Wunused-exception-parameter			\
    -Wunneeded-member-function -Wunneeded-internal-declaration -Wshadow-all	\
    -Wunreachable-code-aggressive -Wvector-conversion -Wzero-length-array	\
    -Wthread-safety -Wsuper-class-method-mismatch
  else ifeq ($(COMPILER_NAME),$(filter $(COMPILER_NAME),g++ gcc))
     CXXFLAGS +=
  endif

  # Flags for hardening the binary
  CXXFLAGS += -fstack-protector-strong -Wformat -Werror=format-security	\
  -D_FORTIFY_SOURCE=2 -fPIE
  LDFLAGS += -pie
else

$(warning "You are not replacing recommended CXXFLAGS by your flags")

endif

###################################################
# TODO: -O1 is needed for hardening
# GCC and clang Optimization flags
#
ifeq ($(BUILD_TYPE),debug)
OPTIM_FLAGS := -O2 -g
DEFINES += -UNDEBUG
else ifeq ($(BUILD_TYPE),release)
OPTIM_FLAGS ?= -O2
DEFINES += -DNDEBUG
USE_BACKWARD := 0
else
$(error BUILD_TYPE shall be debug or release)
endif

###################################################
# Use AddressSanitizer.
#
ifeq ($(USE_ASAN),1)
CXXFLAGS += -fsanitize=address -fno-omit-frame-pointer
LDFLAGS += -fsanitize=address -static-libasan
endif

###################################################
# Use Backward for tracing the stack when a crash occured.
#
ifeq ($(USE_BACKWARD),1)
OBJS := backward.o $(OBJS)
INCLUDES += -I$(THIRDPART)/backward-cpp
VPATH += $(THIRDPART)/backward-cpp
ifneq ($(ARCHI),Darwin)
DEFINES += -DBACKWARD_HAS_DW=1 -DBACKWARD_HAS_BFD=0 -DBACKWARD_HAS_DWARF=0
DEFINES += -DBACKWARD_HAS_UNWIND=1 -DBACKWARD_HAS_BACKTRACE=0
DEFINES += -DBACKWARD_HAS_BACKTRACE_SYMBOL=1
PKG_LIBS += libdw
endif
DEFINES +=
endif

###################################################
# Use ifdef because pkg-config does not like empty argument
#
ifdef PKG_LIBS
PKGCFG_LIBS := `pkg-config --libs $(PKG_LIBS)`
PKGCFG_CFLAGS := `pkg-config --cflags $(PKG_LIBS)`
endif

###################################################
# Place the build directory in first position.
# This allows to locate generated files first
# and object files too (while not recommended).
#
VPATH := $(BUILD) $(VPATH)
INCLUDES := -I$(BUILD) $(INCLUDES)

###################################################
# Finalize c++ and c compilation and linker flags
#
CXXFLAGS := $(CXXFLAGS) $(PKGCFG_CFLAGS) $(OPTIM_FLAGS) $(DEFINES) $(INCLUDES) $(COMPIL_FLAGS)
LDFLAGS := $(LDFLAGS) $(THIRDPART_LIBS) $(NOT_PKG_LIBS) $(PKGCFG_LIBS) $(LINKER_FLAGS)
