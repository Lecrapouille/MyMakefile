# -*- mode: makefile -*-
##=====================================================================
## MyMakefile a generic Makefiles for compiling my github projects.
## Copyright 2019 Quentin Quadrat <lecrapouille@gmail.com>
##
## This file is part of MyMakefile.
##
## MyMakefile is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with MyMakefile.  If not, see <http://www.gnu.org/licenses/>.
##=====================================================================

ALL_NEEDED_LIBS := $(NOT_PKG_LIBS) `pkg-config $(PKG_LIBS) --libs`
CXXFLAGS := $(CXXFLAGS) `pkg-config $(PKG_LIBS) --cflags` $(OVERRIDE_CXXFLAGS)
LDFLAGS := $(LDFLAGS) $(THIRDPART_LIBS) $(ALL_NEEDED_LIBS) $(OVERRIDE_LDFLAGS)

###################################################
# Link sources
$(TARGET): $(OBJS) $(THIRDPART_OBJS) $(THIRDPART_LIBS)
	@$(call print-to,"Linking","$(TARGET)","$(BUILD)/$@","$(VERSION)")
	$(Q)cd $(BUILD) && $(COMPILER) $(OBJS) $(THIRDPART_OBJS) -o $@ $(LDFLAGS)
ifeq ($(BUILD_TYPE),release)
	@# http://reverse.lostrealm.com/protect/strip.html
	@cd $(BUILD) && strip -R .comment -R .note -R .note.ABI-tag $@
endif

###################################################
# Compile sources. Note: abspath is needed for gcov
%.o: %$(SUFFIX) $(BUILD)/%.d $(MYMAKEFILES) version.h
	@$(call print-progress,"Compiling","$(TARGET)","$<")
	$(Q)$(COMPILER) $(DEPFLAGS) $(CXXFLAGS) $(DEFINES) $(INCLUDES) -c $(abspath $<) -o $(abspath $(BUILD)/$@)
	@$(POSTCOMPILE)

###################################################
# Static library
$(STATIC_LIB_TARGET): CXXFLAGS += -fPIC
$(STATIC_LIB_TARGET): $(OBJS) $(THIRDPART_OBJS) $(THIRDPART_LIBS)
	@$(call print-to,"Static lib","$(TARGET)","$(BUILD)/$@","$(VERSION)")
	$(Q)cd $(BUILD) && $(AR) $(ARFLAGS) $@ $? && ranlib $@

###################################################
# Shared library
$(SHARED_LIB_TARGET): CXXFLAGS += -fPIC
$(SHARED_LIB_TARGET): LDFLAGS += -shared
$(SHARED_LIB_TARGET): $(OBJS) $(THIRDPART_OBJS) $(THIRDPART_LIBS)
	@$(call print-to,"Shared lib","$(TARGET)","$(BUILD)/$@","$(VERSION)")
	$(Q)cd $(BUILD) && $(COMPILER) $(LDFLAGS) -o $@ $?

###################################################
# Generate the pkg-config file
$(PKG_FILE): $(MYMAKEFILES) VERSION
	@$(call print-to,"Generating","$(TARGET)","$@","")
	@echo "prefix=$(DESTDIR)$(PREFIX)" > $(BUILD)/$@
	@echo "exec_prefix=$(BINDIR)" >> $(BUILD)/$@
	@echo "libdir=$(LIBDIR)" >> $(BUILD)/$@
	@echo "includedir=$(INCLDIR)" >> $(BUILD)/$@
	@echo "Name: $(PROJECT)" >> $(BUILD)/$@
	@echo "Description: $(DESCRIPTION)" >> $(BUILD)/$@
	@echo "Version: $(TARGET_VERSION)" >> $(BUILD)/$@
	@echo "Libs: -L$$""{libdir} $(SHORT_LIB_TARGET) $(ALL_NEEDED_LIBS)" >> $(BUILD)/$@
	@echo "Cflags: -I$$""{includedir}" >> $(BUILD)/$@

###################################################
# Download external github code source needed by this project.
.PHONY: download-external-libs
download-external-libs:
	@(cd $(THIRDPART) && ./download-external-libs.sh $(ARCHI))

###################################################
# Compile external projects needed.
.PHONY: compile-external-libs
compile-external-libs:
	@(cd $(THIRDPART) && ./compile-external-libs.sh $(ARCHI))

###################################################
# Create an uploadable tarball for the OpenSuse Build Service (OBS).
.PHONY: obs
obs:
	@./.integration/opensuse-build-service.sh

###################################################
# Launch the executable with address sanitizer (if enabled).
.PHONY: asan
asan: $(TARGET)
	@$(SANITIZER) ./build/$(TARGET) 2>&1 | ./$(THIRDPART)/asan_symbolize.py

###################################################
# Generate the code coverage html rapport.
.PHONY: coverage
coverage: $(TARGET)
	@$(call print-to,"Running","$(TARGET)","$(COVERAGE_RAPPORT)","")
	@./$(BUILD)/$(TARGET) || echo ""
	@$(call print-to,"Documentation","$(COVERAGE_RAPPORT)","$(COVERAGE_DIR)","")
	@lcov --quiet --directory .. -c -o $(COVERAGE_RAPPORT)
	@lcov --quiet --remove $(COVERAGE_RAPPORT) '/usr*' 'external/*' 'tests/*' -o $(COVERAGE_RAPPORT)
	@genhtml --quiet -o $(COVERAGE_DIR) -t "$(TARGET)" $(COVERAGE_RAPPORT)
	@xdg-open $(COVERAGE_DIR)/index.html >/dev/null

###################################################
# For using this service, you have to download and install
# a gcc wrapper and compile your project back. A tarball
# should be created and you have to upload it to their webpage.
# See https://scan.coverity.com/ for more infos.
#
# Create a tarball for Coverity Scan a static analysis of code.
.PHONY: coverity-scan
coverity-scan: clean
	@rm -fr $(TARGET).tgz cov-int 2> /dev/null
	@cov-build --dir cov-int $(MAKE) && tar czvf $(TARGET).tgz cov-int

###################################################
# Note: Please be sure Doxyfile use the same output directory than $(GENDOC)
# Generate the code source documentation with doxygen.
.PHONY: doc
doc:
	@doxygen Doxyfile
	@xdg-open $(GENDOC)/html/index.html >/dev/null

###################################################
# Compress project sources without its .git, $BUILD
# and $GENDOC generated files. Tarball name confict is
# managed: if a tarball already exists, the older will
# stay intact and a new one is created.
#
# Create a backup of the code as a tarball file.
.PHONY: tarball
tarball:
	@./$(M)/targz.sh $(PWD) $(TARGET)

###################################################
# Generate a header file with the project version.
version.h: VERSION
	@$(call print-from,"Version","$(TARGET)","VERSION","")
	@./$(M)/version.sh VERSION $(BUILD)/version.h

###################################################
# Display the compilator version and informations.
.PHONY: which-gcc
which-gcc:
	@$(call print-simple,"Version","$(COMPILER)")
	@$(COMPILER) --version

###################################################
# Clean the project
.PHONY: clean
clean:
	@$(call print-simple,"Cleaning","$(PWD)")
	@rm -fr $(BUILD) $(GENDOC)/coverage $(GENDOC)/html 2> /dev/null

###################################################
# Create a temporary folder to store *.o and *.d files
$(DEPFILES): | $(BUILD)
$(PKG_FILE): | $(BUILD)
$(OBJS): | $(BUILD)
version.h: | $(BUILD)
$(BUILD): which-gcc
	@mkdir -p $(BUILD)

###################################################
# Auto-Dependency Generation
$(BUILD)/%.d: ;
.PRECIOUS: $(BUILD)/%.d

-include $(patsubst %,$(BUILD)/%.d,$(basename $(OBJS)))

include $(M)/Makefile.help
