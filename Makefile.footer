# -*- mode: makefile -*-
##==================================================================================
## MIT License
##
## Copyright (c) 2019 Quentin Quadrat <lecrapouille@gmail.com>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##==================================================================================

include $(M)/Makefile.flags

###################################################
# Download Backward for tracing the stack when a crash occured.
#

ifeq ($(USE_BACKWARD),1)
$(PROJECT_INFO): | backward.cpp
ifeq ($(ARCHI),Darwin)
backward.cpp: | $(BUILD)
else
$(BUILD)/backward-cpp/backward.cpp: | $(BUILD)
endif
	@if [ ! -d "$(BUILD)/backward-cpp" ] ; then \
	$(call print-to,"Downloading","backward-cpp","$(TARGET)",""); \
	cd $(BUILD) && git clone https://github.com/Lecrapouille/backward-cpp.git --depth=1; \
	fi
endif

###################################################
# Link sources
#
$(TARGET): $(OBJS) $(THIRDPART_OBJS) $(THIRDPART_LIBS)
	@$(call print-to,"Linking","$(TARGET)","$(BUILD)/$@","$(VERSION)")
	$(Q)cd $(BUILD) && $(COMPILER) $(LDFLAGS) $(OBJS) $(THIRDPART_OBJS) -o $@ $(THIRDPART_LIBS) $(NOT_PKG_LIBS) $(PKGCFG_LIBS) $(LINKER_FLAGS)
ifeq ($(BUILD_TYPE),release)
  ifneq ($(ARCHI),Darwin)
	@# See http://reverse.lostrealm.com/protect/strip.html
	@cd $(BUILD) && strip -R .comment -R .note -R .note.ABI-tag $@
  endif
endif

###################################################
# Compile sources. Note: abspath is needed for gcov
#
%.o: %$(SUFFIX) $(BUILD)/%.d $(MYMAKEFILES) $(PROJECT_INFO)
	@$(call print-progress,"Compiling","$(TARGET)","$<")
	$(Q)$(COMPILER) $(DEPFLAGS) $(CXXFLAGS) $(PKGCFG_CFLAGS) $(OPTIM_FLAGS) $(DEFINES) $(INCLUDES) -c $(abspath $<) -o $(abspath $(BUILD)/$@) $(COMPIL_FLAGS)
	@$(POSTCOMPILE)

###################################################
# Static library
#
$(STATIC_LIB_TARGET): CXXFLAGS += -fPIC
$(STATIC_LIB_TARGET): $(OBJS) $(THIRDPART_OBJS) $(THIRDPART_LIBS)
	@$(call print-to,"Static lib","$(TARGET)","$(BUILD)/$@","$(VERSION)")
	$(Q)cd $(BUILD) && $(AR) $(ARFLAGS) $@ $(OBJS) $(THIRDPART_OBJS) && ranlib $@

###################################################
# Shared library
#
$(SHARED_LIB_TARGET): CXXFLAGS += $(DLL_CXXFLAGS)
$(SHARED_LIB_TARGET): LDFLAGS += $(DLL_LDFLAGS)
$(SHARED_LIB_TARGET): $(OBJS) $(THIRDPART_OBJS) $(THIRDPART_LIBS)
	@$(call print-to,"Shared lib","$(TARGET)","$(BUILD)/$@","$(VERSION)")
	$(Q)cd $(BUILD) && $(COMPILER) $(LDFLAGS) -o $@ $(OBJS) $(THIRDPART_OBJS) $(LINK_ALL_LOAD) $(THIRDPART_LIBS) $(NOT_PKG_LIBS) $(PKGCFG_LIBS) $(LINK_NO_ALL_LOAD) $(LINKER_FLAGS)

###################################################
# Generate the pkg-config file
#
$(PKG_FILE): | $(PROJECT_INFO)
$(PKG_FILE): $(MYMAKEFILES) VERSION
	@$(call CREATE_PKG_CONFIG,$(PKG_FILE))

.PHONY: pkg-config
pkg-config:
	@$(call CREATE_PKG_CONFIG,$(PKG_FILE))

###################################################
# Download external github code source needed by this project.
.PHONY: download-external-libs
download-external-libs:
	@if [ -e "$(THIRDPART)/download-external-libs.sh" ] ; then \
	(cd $(THIRDPART) && ./download-external-libs.sh $(ARCHI) $(TARGET)); \
	else \
	$(ECHO_COLOR) "  \033[33m:( \033[36mMissing file $(THIRDPART)/download-external-libs.sh \033[33m:("; \
	$(ECHO_COLOR) "  \033[33m:) \033[36mOr no external libs to download ! \033[33m:)\033[00m"; \
	fi

###################################################
# Compile external projects needed.
.PHONY: compile-external-libs
compile-external-libs:
	@if [ -e "$(THIRDPART)/compile-external-libs.sh" ] ; then \
	(cd $(THIRDPART) && ./compile-external-libs.sh $(ARCHI) $(TARGET)); \
	else \
	$(ECHO_COLOR) "  \033[33m:( \033[36mMissing file $(THIRDPART)/compile-external-libs.sh \033[33m:("; \
	$(ECHO_COLOR) "  \033[33m:) \033[36mOr no external libs to compile ! \033[33m:)\033[00m"; \
	fi

###################################################
# Run the binary
#
.PHONY: run
run:
	@./$(BUILD)/$(TARGET); echo "  \033[33merror code: $$?\033[00m"

###################################################
# Compile, launch unit tests and generate the code coverage html report.
# This rule is an alias for unit-tests for retro-compatibility: I initialy
# used the name "unit-tests" and dsicovered recently that the official name
# is "check".
#
.PHONY: unit-tests
unit-tests: check

###################################################
# Create an uploadable tarball for the OpenSuse Build Service (OBS).
.PHONY: obs
obs:
	@./.integration/opensuse-build-service.sh

###################################################
# Check if your project is harden
.PHONY: check-harden
check-harden: $(TARGET)
	@hardening-check ./$(BUILD)/$(TARGET); echo -n ""
ifeq ($(BUILD_TYPE),debug)
	@echo " Project compiled in debug mode"
endif

###################################################
# Launch the executable with address sanitizer (if enabled).
.PHONY: asan
asan: $(TARGET)
	@$(SANITIZER) ./$(BUILD)/$(TARGET) 2>&1 | ./$(THIRDPART)/asan_symbolize.py

###################################################
# Launch the executable with gprof.
.PHONY: gprof
gprof: $(TARGET)
	@mkdir -p $(GENDOC)/gprof
	$(Q)./$(BUILD)/$(TARGET); gprof ./$(BUILD)/$(TARGET) gmon.out > $(GENDOC)/gprof/analysis.txt && \
	echo "You can read the report: $(GENDOC)/gprof/analysis.txt"

###################################################
# Generate the code coverage html rapport.
.PHONY: coverage
coverage: $(TARGET)
	@$(call print-to,"Running","$(TARGET)","$(COVERAGE_RAPPORT)","")
ifeq ($(TRAVIS),true)
	@./$(BUILD)/$(TARGET)
else
	@./$(BUILD)/$(TARGET) || echo ""
endif
	@$(call print-to,"Documentation","$(COVERAGE_RAPPORT)","$(COVERAGE_DIR)","")
	@lcov --quiet --directory .. -c -o $(COVERAGE_RAPPORT)
	@lcov --quiet --remove $(COVERAGE_RAPPORT) '/usr*' 'external/*' 'tests/*' -o $(COVERAGE_RAPPORT)
ifeq ($(TRAVIS),true)
	@coveralls-lcov --source-encoding=ISO-8859-1 $(COVERAGE_RAPPORT)
else
	@genhtml --quiet -o $(COVERAGE_DIR) -t "$(TARGET)" $(COVERAGE_RAPPORT)
	@xdg-open $(COVERAGE_DIR)/index.html >/dev/null
endif

###################################################
# For using this service, you have to download and install
# a gcc wrapper and compile your project back. A tarball
# should be created and you have to upload it to their webpage.
# See https://scan.coverity.com/ for more infos.
#
# Create a tarball for Coverity Scan a static analysis of code.
.PHONY: coverity-scan
coverity-scan: clean
	@rm -fr $(TARGET).tgz cov-int 2> /dev/null
	@cov-build --dir cov-int $(MAKE) && tar czvf $(TARGET).tgz cov-int

###################################################
# Note: Please be sure Doxyfile use the same output directory than $(GENDOC)
# Generate the code source documentation with doxygen.
.PHONY: doc
doc:
	@$(call RULE_CREATE_DOXYFILES)
	@doxygen Doxyfile
	@xdg-open $(GENDOC)/html/index.html >/dev/null

###################################################
# Compress project sources without its .git, $BUILD
# and $GENDOC generated files. Tarball name conflict is
# managed: if a tarball already exists, the older will
# stay intact and a new one is created.
#
# Create a backup of the code as a tarball file.
.PHONY: tarball
tarball:
	@./$(M)/targz.sh $(PWD) $(TARGET)

###################################################
# Generate a header file with the project information.
$(PROJECT_INFO): VERSION
	@$(call print-from,"Version","$(TARGET)","VERSION","")
	@echo "PROJECT=$(PROJECT)" > $(BUILD)/project_info.txt
	@echo "TARGET=$(TARGET)" >> $(BUILD)/project_info.txt
	@echo "PROJECT_DATA_PATH=$(PROJECT_DATA_PATH)" >> $(BUILD)/project_info.txt
	@echo "PROJECT_TEMP_DIR=$(PROJECT_TEMP_DIR)" >> $(BUILD)/project_info.txt
	@echo "BUILD_TYPE=$(BUILD_TYPE)" >> $(BUILD)/project_info.txt
	@./$(M)/config.sh $(P)/VERSION $(BUILD)

###################################################
# Create a Version file if not present
#
VERSION:
	echo "0.1.0" > VERSION

###################################################
# Display the compiler version and information.
.PHONY: which-compiler
which-compiler:
	@$(call print-simple,"Compiler","$(COMPILER)")
	@$(COMPILER) --version

###################################################
# Display the description of the project
.PHONY: about
about:
	@$(call print-to,"About","$(TARGET)","$(DESCRIPTION)")

###################################################
# Clean the project
.PHONY: clean
clean::
	@$(call print-simple,"Cleaning","$(PWD)")
	@rm -fr $(BUILD) $(GENDOC)/coverage $(GENDOC)/html $(GENDOC)/gprof 2> /dev/null

###################################################
# Create a temporary folder to store *.o and *.d files
#
$(DEPFILES): | $(BUILD)
$(PKG_FILE): | $(BUILD)
$(OBJS): | $(PROJECT_INFO)
$(PROJECT_INFO): | $(BUILD) VERSION
which-compiler: | about
$(BUILD): about which-compiler
	@mkdir -p $(BUILD)

###################################################
# Auto-Dependency Generation
#
$(BUILD)/%.d: ;
.PRECIOUS: $(BUILD)/%.d

-include $(patsubst %,$(BUILD)/%.d,$(basename $(OBJS)) $(basename $(THIRDPART_OBJS)))

include $(M)/Makefile.help
