# -*- mode: makefile -*-
##==================================================================================
## MIT License
##
## Copyright (c) 2019 Quentin Quadrat <lecrapouille@gmail.com>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##==================================================================================

###################################################
# Uncomment these two commands for enabling debuging
#
#OLD_SHELL := $(SHELL)
#SHELL = $(warning [$@])$(OLD_SHELL) -x

###################################################
# Detect the operating system: Unix, OSX and Windows
# and give a shorter name if needed.
#
ifeq ($(OS),Windows_NT)
ARCHI := Windows
else
ARCHI := $(shell sh -c 'uname -s 2>/dev/null || echo Unknown')
ARCHI := $(patsubst CYGWIN%,Cygwin,$(ARCHI))
ARCHI := $(patsubst MSYS%,MSYS,$(ARCHI))
ARCHI := $(patsubst MINGW%,MINGW,$(ARCHI))
endif

###################################################
# Macros to override through Makefile command lines
#

###################################################
# Define your C++ compilator (default: empty).
CXX ?=

###################################################
# Define your C compilator (default: empty).
CXX ?=

###################################################
# Define the directory holding compilation files (default: build/).
BUILD ?= build

###################################################
# Define the directory holding third part libraries that shall be compiled (default: $(P)/external).
THIRDPART ?= $(P)/external

###################################################
# Define the directory holding generated documentation (default: doc). Do not add $(P) to allow several folders
GENDOC ?= doc

###################################################
# Define a temporary directory where the project will be installed: $(DESTDIR)$(PREFIX)/lib and $(DESTDIR)$(PREFIX)/bin (default: empty)
DESTDIR ?=

###################################################
# Define where the project will be installed: $(DESTDIR)$(PREFIX)/lib and $(DESTDIR)$(PREFIX)/bin (default: /usr)
PREFIX ?= /usr

###################################################
# Select the C++ standard (default is --std=c++11).
STANDARD ?= --std=c++11

###################################################
# Select either a C++ project or a C project (default is .cpp).
SUFFIX ?= .cpp
CC_SUFFIX = .c
CXX_SUFFIX = .cpp

###################################################
# Static library (default is ar and crs).
AR ?= ar
ARFLAGS ?= crs

###################################################
# Generated file holding project information
PROJECT_INFO ?= project_info.hpp

###################################################
# MacOS X path to the application bundle icon
MACOS_BUNDLE_ICON ?= .makefile/macos.icns

###################################################
# Check if some variables have been defined
#
ifndef PROJECT
$(error PROJECT is not set before including Makefile.header. Give a name to the project.)
endif

ifndef TARGET
$(error TARGET is not set before including Makefile.header. Give a name to the executable target.)
endif

ifndef DESCRIPTION
$(error DESCRIPTION is not set before including Makefile.header. Please write a small description of your project.)
endif

ifndef P
$(error P is not set before including Makefile.header. Set the project root path.)
endif

ifndef M
$(error M is not set before including Makefile.header. Set the path of the MyMakefile project.)
endif

ifndef BUILD_TYPE
$(error BUILD_TYPE is not set before including Makefile.header. Set it to debug or release.)
endif

ifndef ARCHI
$(error ARCHI cannot be set)
endif

###################################################
# echo -e command (not supported by Mac OS X)
#
ifeq ($(ARCHI),Darwin)
ECHO_COLOR = echo
else ifeq ($(ARCHI),MINGW)
ECHO_COLOR = echo
else
ECHO_COLOR = echo -e
endif

###################################################
# Temporary directory
#
TMPDIR ?= /tmp

###################################################
# Shared libraries file extension
#
ifeq ($(ARCHI),Darwin)
SO := dylib
else ifeq ($(ARCHI),Linux)
SO := so
else ifeq ($(ARCHI),Windows)
SO := dll
else ifeq ($(ARCHI),MSYS)
SO := dll
else ifeq ($(ARCHI),MINGW)
SO := dll
else
$(error Unknown shared library file extension for this architecture)
endif
DEFINES += -DDYLIB_EXT=\".$(SO)\"

###################################################
# Define the compilator
#
ifeq ($(SUFFIX),$(CC_SUFFIX))
COMPILER := $(CC)
else ifeq ($(SUFFIX),$(CXX_SUFFIX))
COMPILER := $(CXX) $(STANDARD)
else
$(error Supported SUFFIX are $(CC_SUFFIX) or $(CXX_SUFFIX))
endif

###################################################
# Determine compiler name
#
COMPILER_NAME := $(shell $(COMPILER) --version | head -1 | cut -d" " -f1 | cut -d"-" -f1)

###################################################
# Determine compiler version
#
ifeq ("$(COMPILER_NAME)","clang")
COMPILER_VERSION := $(shell $(COMPILER) --version | head -1 | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
else ifeq ("$(COMPILER_NAME)","g++")
COMPILER_VERSION := $(shell $(COMPILER) --version | head -1 | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
else ifeq ("$(COMPILER_NAME)","gcc")
COMPILER_VERSION := $(shell $(COMPILER) --version | head -1 | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
else
COMPILER_VERSION := 0
endif

###################################################
# Convert version number into a integer (ie g++-4.9.2 will return 40902)
#
COMPILER_VERSION := $(shell echo $(COMPILER_VERSION) | sed -e 's/\.\([0-9][0-9]\)/\1/g' -e 's/\.\([0-9]\)/0\1/g' -e 's/^[0-9]\{3,4\}$$//')

include $(M)/Makefile.macros
