# -*- mode: makefile -*-
##=====================================================================
## SimTaDyn: A GIS in a spreadsheet.
## Copyright 2018 Quentin Quadrat <lecrapouille@gmail.com>
##
## This file is part of SimTaDyn.
##
## SimTaDyn is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
##=====================================================================

###################################################
# Detect the operating system: Unix, OSX and Windows
# and give a shorter name if needed.
#
ifeq ($(OS),Windows_NT)
ARCHI := Windows
else
ARCHI := $(shell uname -s)
endif

###################################################
# Define the directory holding compilation files (*.o ...).
BUILD ?= build

###################################################
# Define the directory holding third part libraries that shall be compiled.
THIRDPART ?= $(P)/external

###################################################
# Define the directory holding generated documentation.
GENDOC ?= doc

###################################################
# Prefix to the path that the "install" target will install into: libs to $(DESTDIR)$(PREFIX)/lib, executables to $(DESTDIR)$(PREFIX)/bin
PREFIX ?= /usr

###################################################
# Select the C++ standard.
#
STANDARD ?= --std=c++11

###################################################
# Select either a C++ project or a C project.
#
SUFFIX ?= .cpp

###################################################
# Static library
#
AR ?= ar
ARFLAGS ?= crs

###################################################
# Use Backward library for tracing the stack in case of crash
#
USE_BACKWARD ?= 1

###################################################
# Check if some variables have been defined

ifndef PROJECT
$(error PROJECT is not set before including Makefile.header. Give a name to the project.)
endif

ifndef TARGET
$(error TARGET is not set before including Makefile.header. Give a name to the executable target.)
endif

ifndef DESCRIPTION
$(error DESCRIPTION is not set before including Makefile.header. Please write a small description of your project.)
endif

ifndef P
$(error P is not set before including Makefile.header. Set the project root path.)
endif

ifndef M
$(error M is not set before including Makefile.header. Set the path of the MyMakefile project.)
endif

ifndef BUILD_TYPE
$(error BUILD_TYPE is not set before including Makefile.header. Set it to debug or release.)
endif

ifndef ARCHI
$(error ARCHI cannot be set)
endif

###################################################
# Shared libraries file extension
#
ifeq ($(ARCHI),Darwin)
SO := dylib
else ifeq ($(ARCHI),Linux)
SO := so
else ifeq ($(ARCHI),Windows)
SO := dll
else
$(error Unknown shared library file extension for this architecture)
endif

###################################################
# Define the compilator
#
ifeq ($(SUFFIX),.c)
COMPILER := $(CC)
else ifeq ($(SUFFIX),.cpp)
COMPILER := $(CXX) $(STANDARD)
else
$(error Supported SUFFIX are .c or .cpp)
endif

###################################################
# Determine compiler name
#
COMPILER_NAME := $(shell $(COMPILER) --version | head -1 | cut -d" " -f1 | cut -d"-" -f1)

###################################################
# Determine compiler version
#
ifeq ("$(COMPILER_NAME)","clang")
COMPILER_VERSION := $(shell $(COMPILER) --version | head -1 | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
else ifeq ("$(COMPILER_NAME)","g++")
COMPILER_VERSION := $(shell $(COMPILER) -dumpversion)
else ifeq ("$(COMPILER_NAME)","gcc")
COMPILER_VERSION := $(shell $(COMPILER) -dumpversion)
else
COMPILER_VERSION :=
endif

###################################################
# Convert version number into a integer (ie g++-4.9.2 will return 40902)
#
COMPILER_VERSION := $(shell echo $(COMPILER_VERSION) | sed -e 's/\.\([0-9][0-9]\)/\1/g' -e 's/\.\([0-9]\)/0\1/g' -e 's/^[0-9]\{3,4\}$$//')

include $(M)/Makefile.macros
