# -*- mode: makefile -*-
##==================================================================================
## MIT License
##
## Copyright (c) 2019 Quentin Quadrat <lecrapouille@gmail.com>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##==================================================================================

include $(M)/Makefile.color

###################################################
# Get the project version. Can be used for creating
# shared libraries.
#
TARGET_VERSION := $(shell \
  if [ ! -f $(P)/VERSION.txt ]; then echo "0.1.0" > $(P)/VERSION.txt; fi; \
  cat $(P)/VERSION.txt)
TARGET_MAJOR_VERSION := $(shell cat $(P)/VERSION.txt | cut -d"." -f1)
TARGET_MINOR_VERSION := $(shell cat $(P)/VERSION.txt | cut -d"." -f2)

###################################################
# Get project and target names in lower case
#
PROJECT_LOWER_CASE := $(shell echo $(PROJECT) | tr A-Z a-z)
TARGET_LOWER_CASE := $(shell echo $(TARGET) | tr A-Z a-z)

###################################################
# Define names for static and shared libraries.
#
SHORT_LIB_TARGET := -l$(TARGET_LOWER_CASE)
LIB_TARGET := lib$(TARGET_LOWER_CASE)
SHARED_LIB_TARGET_NOVERSION := $(LIB_TARGET).$(SO)
SHARED_LIB_TARGET := $(SHARED_LIB_TARGET_NOVERSION).$(TARGET_VERSION)
SHARED_LIB_TARGET_MAJOR := $(SHARED_LIB_TARGET_NOVERSION).$(TARGET_MAJOR_VERSION)
STATIC_LIB_TARGET_NOVERSION :=  $(LIB_TARGET).a
STATIC_LIB_TARGET := $(STATIC_LIB_TARGET_NOVERSION).$(TARGET_VERSION)
STATIC_LIB_TARGET_MAJOR := $(STATIC_LIB_TARGET_NOVERSION).$(TARGET_MAJOR_VERSION)

###################################################
# Define where to install exec, data, libraries, documentation ...
#
INSTALL_INCLUDEDIR = $(DESTDIR)$(INCLUDEDIR)/$(PROJECT_LOWER_CASE)/$(TARGET_VERSION)
INSTALL_LIBDIR = $(DESTDIR)$(LIBDIR)
INSTALL_BINDIR = $(DESTDIR)$(BINDIR)
INSTALL_DATADIR = $(DESTDIR)$(DATADIR)

###################################################
# Define where to install pkg-config file
#
INSTALL_PKGLIBDIR = $(DESTDIR)$(PKGLIBDIR)
PKG_FILE = $(TARGET_LOWER_CASE)-$(TARGET_VERSION).pc
SYMBOLIC_PKG_FILE = $(TARGET_LOWER_CASE).pc

###################################################
# TODO to be cleaned
#
PROJECT_EXE_NO_VERSION := $(INSTALL_BINDIR)/$(TARGET)
PROJECT_EXE := $(PROJECT_EXE_NO_VERSION)-$(TARGET_VERSION)
PROJECT_DATA_ROOT := $(INSTALL_DATADIR)/$(PROJECT)/$(TARGET_VERSION)
PROJECT_DATA_PATH := $(PROJECT_DATA_ROOT)/data
PROJECT_DOC_PATH := $(PROJECT_DATA_ROOT)/$(GENDOC)
PROJECT_TEMP_DIR := $(TMPDIR)/$(PROJECT)

###################################################
# Define and configure the tool asan
#
ifeq ($(USE_ASAN),1)
SANITIZER := ASAN_OPTIONS=symbolize=1 ASAN_SYMBOLIZER_PATH=$(shell which llvm-symbolizer)
endif

###################################################
# Path where to store the generated coverage docs
#
COVERAGE_DIR := $(P)/$(GENDOC)/coverage
COVERAGE_RAPPORT := $(COVERAGE_DIR)/coverage.html

###################################################
# Store files dependencies in *.d files: when a file
# is modified this will compile others which depend
# on it.
#
DEPFLAGS = -MT $@ -MMD -MP -MF $(BUILD)/$*.Td
POSTCOMPILE = mv -f $(BUILD)/$*.Td $(BUILD)/$*.d

###################################################
#
DEFINES += \
  -DPROJECT_TEMP_DIR=\"$(PROJECT_TEMP_DIR)\"

###################################################
# git clone a project (depth=1 non recurse)
#
define GIT_CLONE_NO_RECURSE
	if [ ! -d "$(1)" ]; then \
		mkdir -p "$(1)"; \
	fi
	if [ ! -d "$(1)/$(3)" ]; then \
		source $(M)/download-external-libs.sh "$(ARCHI)" "$(TARGET)" && cd $(1) && cloning_non_recurse $(2)/$(3); \
	else \
		echo "Already cloned"; \
    fi
endef

###################################################
# git clone a project (depth=1 and recurse)
#
define GIT_CLONE_RECURSE
	if [ ! -d "$(1)" ]; then \
		mkdir -p "$(1)"; \
	fi
	if [ ! -d "$(1)/$(3)" ]; then \
		source $(M)/download-external-libs.sh "$(ARCHI)" "$(TARGET)" && cd $(1) && cloning $(2)/$(3); \
	else \
		echo "Already cloned"; \
    fi
endef

###################################################
# Install files present in the folder $1 in the the
# folder $2. Optionaly add a filter $3 for selecting
# desired files.
#
define INSTALL_FILES
	if [ -d $(1) ]; then \
		cd $(1); \
		mkdir -p $(2); \
		for f in `find . $(3) -type f`; do install -m 644 "$$f" "$(2)/$$f"; done; \
	fi
endef

###################################################
# Universal macro for installing a folder $1 and all
# its files in the folder $2. Optionaly a file filter
# can be adding in $3 for installing desired files.
#
define INSTALL_FOLDER
	if [ -d $(1) ]; then \
		$(call print-to,"Installing","$(1)","$(2)",""); \
		cd $(1); \
		for d in `find . -type d`; do install -d -m 755 "$$d" "$(2)/$$d"; done; \
		for f in `find . $(3) -type f`; do install -m 644 "$$f" "$(2)/$$f"; done; \
	fi
endef

###################################################
# Install a folder $1 and all its files in the folder
# $(PROJECT_DATA_ROOT).
#
define INSTALL_PROJECT_FOLDER
	@$(call INSTALL_FOLDER,$(1),$(PROJECT_DATA_ROOT)/$(1))
endef

###################################################
# Install the project binary
#
define INSTALL_BINARY
	@$(call print-to,"Installing","$(BUILD)/$(TARGET)","$(PROJECT_EXE)","")
	@mkdir -p $(INSTALL_BINDIR)
	@cp $(BUILD)/$(TARGET) $(PROJECT_EXE)
	@ln -sf $(PROJECT_EXE) $(PROJECT_EXE_NO_VERSION)
endef

###################################################
# Install the project documentation.
# TODO (call INSTALL_FOLDER,examples) to remove .git build external
#
define INSTALL_DOCUMENTATION
	@install -d -m 755 $(PROJECT_DATA_ROOT)
	@install -m 644 AUTHORS LICENSE README.md ChangeLog $(PROJECT_DATA_ROOT)
	@$(call INSTALL_PROJECT_FOLDER,$(GENDOC))
	@$(call INSTALL_PROJECT_FOLDER,examples)
	@$(call INSTALL_PROJECT_FOLDER,data)
endef

###################################################
# Create a MacOS application bundle
#
define CREATE_MACOS_INFO_PLIST
	@echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > $(BUILD)/$(1)
	@echo "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">" >> $(BUILD)/$(1)
	@echo "<plist version=\"1.0\">" >> $(BUILD)/$(1)
	@echo "<dict>" >> $(BUILD)/$(1)
	@echo "    <key>CFBundleExecutable</key>" >> $(BUILD)/$(1)
	@echo "    <string>${TARGET}</string>" >> $(BUILD)/$(1)
	@echo "    <key>CFBundleIdentifier</key>" >> $(BUILD)/$(1)
	@echo "    <string>com.${APPLE_IDENTIFIER}.${TARGET}</string>" >> $(BUILD)/$(1)
	@echo "    <key>CFBundleInfoDictionaryVersion</key>" >> $(BUILD)/$(1)
	@echo "    <string>6.0</string>" >> $(BUILD)/$(1)
	@echo "    <key>CFBundleName</key>" >> $(BUILD)/$(1)
	@echo "    <string>${TARGET}</string>" >> $(BUILD)/$(1)
	@echo "    <key>CFBundlePackageType</key>" >> $(BUILD)/$(1)
	@echo "    <string>APPL</string>" >> $(BUILD)/$(1)
	@echo "    <key>CFBundleIconFile</key>" >> $(BUILD)/$(1)
	@echo "    <string>${TARGET}.icns</string>" >> $(BUILD)/$(1)
	@echo "</dict>" >> $(BUILD)/$(1)
	@echo "</plist>" >> $(BUILD)/$(1)
endef

###################################################
# Create a MacOS application bundle
#
define CREATE_MACOS_APP_BUNDLE
	@$(call print-to,"Generating bundle","$(TARGET)","$(1)","")
	@rm -fr $(BUILD)/$(TARGET)$(EXT) 2> /dev/null
	@mkdir -p $(BUILD)/$(TARGET)$(EXT)/Contents/{MacOS,Resources}
	@cp $(BUILD)/$(TARGET) $(BUILD)/$(TARGET)$(EXT)/Contents/MacOS
	@cp $(MACOS_BUNDLE_ICON) $(BUILD)/$(TARGET)$(EXT)/Contents/Resources/$(TARGET).icns
	@cp -r data/* $(BUILD)/$(TARGET)$(EXT)/Contents/Resources
	@$(call CREATE_MACOS_INFO_PLIST,$(TARGET)$(EXT)/Contents/Info.plist)
endef

###################################################
# Create the pkg-config file (if the project is a library)
#
define CREATE_PKG_CONFIG
	@$(call print-to,"Generating","$(TARGET)","$(1)","")
	@echo "prefix=$(PREFIX)" > $(BUILD)/$(1)
	@echo "exec_prefix=$(PREFIX)" >> $(BUILD)/$(1)
	@echo "libdir=$(LIBDIR)" >> $(BUILD)/$(1)
	@echo "includedir=$(INCLUDEDIR)/$(PROJECT_LOWER_CASE)/$(TARGET_VERSION)" >> $(BUILD)/$(1)
	@echo "Name: $(PROJECT)" >> $(BUILD)/$(1)
	@echo "Description: $(DESCRIPTION)" >> $(BUILD)/$(1)
	@echo "Version: $(TARGET_VERSION)" >> $(BUILD)/$(1)
	@echo "Libs: -L$$""{libdir} $(SHORT_LIB_TARGET) $(NOT_PKG_LIBS) $(PKGCFG_LIBS)" >> $(BUILD)/$(1)
	@echo "Cflags: -I$$""{includedir}" >> $(BUILD)/$(1)
endef

###################################################
# Install the pkg-config file (if the project is a library)
#
define INSTALL_PKG_CONFIG
	@$(call print-to,"Installing","pkg-config","$(INSTALL_PKGLIBDIR)","")
	@mkdir -p $(INSTALL_PKGLIBDIR)
	@install -m 644 $(BUILD)/$(PKG_FILE) $(INSTALL_PKGLIBDIR)
	@ln -snf $(INSTALL_PKGLIBDIR)/$(PKG_FILE) $(INSTALL_PKGLIBDIR)/$(SYMBOLIC_PKG_FILE)
endef

###################################################
# Install static and dynamic libraries (if the project
# is not an application)
#
define INSTALL_PROJECT_LIBRARIES
	@$(call print-to,"Installing","libs","$(INSTALL_LIBDIR)","")
	@mkdir -p $(INSTALL_LIBDIR)
	@install -m 644 $(BUILD)/$(STATIC_LIB_TARGET) $(INSTALL_LIBDIR)
	@ln -snf $(INSTALL_LIBDIR)/$(STATIC_LIB_TARGET) $(INSTALL_LIBDIR)/$(STATIC_LIB_TARGET_NOVERSION)
	@ln -snf $(INSTALL_LIBDIR)/$(STATIC_LIB_TARGET) $(INSTALL_LIBDIR)/$(STATIC_LIB_TARGET_MAJOR)
	@install -m 644 $(BUILD)/$(SHARED_LIB_TARGET) $(INSTALL_LIBDIR)
	@ln -snf $(INSTALL_LIBDIR)/$(SHARED_LIB_TARGET) $(INSTALL_LIBDIR)/$(SHARED_LIB_TARGET_NOVERSION)
	@ln -snf $(INSTALL_LIBDIR)/$(SHARED_LIB_TARGET) $(INSTALL_LIBDIR)/$(SHARED_LIB_TARGET_MAJOR)
	@$(call INSTALL_PKG_CONFIG)
endef

###################################################
# Install all .hpp files to the $(INSTALL_INCLUDEDIR) folder
# TODO need glob regex
#
define INSTALL_PROJECT_HEADERS
	@$(call print-to,"Installing","headers","$(INSTALL_INCLUDEDIR)","")
	@$(call INSTALL_FOLDER,include,$(INSTALL_INCLUDEDIR))
	@$(call INSTALL_FOLDER,src,$(INSTALL_INCLUDEDIR),\
	-name "*.[hit]pp" -o -name "*.incl" -o -name "*.h" -o -name "*.hh" -o -name "*.hxx")
endef

###################################################
# Install hpp files from include folder to the $(INSTALL_INCLUDEDIR) folder
#
define INSTALL_PROJECT_INCLUDES
	@$(call print-to,"Installing","headers","$(INSTALL_INCLUDEDIR)","")
	@$(call INSTALL_FOLDER,include,$(INSTALL_INCLUDEDIR))
endef

###################################################
# Install folder and files of third part libraries
#
define INSTALL_THIRDPART_FOLDER
	@$(call INSTALL_FOLDER,$(THIRDPART)/$(1),$(INSTALL_INCLUDEDIR)/$(2),$(3))
endef

###################################################
# Install files of third part libraries
#
define INSTALL_THIRDPART_FILES
	@$(call print-to,"Installing","$(THIRDPART)/$(1)","$(INSTALL_INCLUDEDIR)/$(2)","")
	@$(call INSTALL_FILES,$(THIRDPART)/$(1),$(INSTALL_INCLUDEDIR)/$(2),-maxdepth 1 -mindepth 1 $(3))
endef

###################################################
# Create Doxyfile files (TODO: update license in footer.html. FIXME linux path make failed sed ie LOGO)
#
define RULE_CREATE_DOXYFILES
	cp -r $(M)/doxygen $(P)/$(GENDOC)
	find $(P)/$(GENDOC)/doxygen -type f -exec sed -i 's/%VERSION/$(TARGET_VERSION)/g' {} \;
	find $(P)/$(GENDOC)/doxygen -type f -exec sed -i 's/%TARGET/$(TARGET)/g' {} \;
	find $(P)/$(GENDOC)/doxygen -type f -exec sed -i 's/%PROJECT/$(PROJECT)/g' {} \;
	find $(P)/$(GENDOC)/doxygen -type f -exec sed -i 's/%DESCRIPTION/$(DESCRIPTION)/g' {} \;
	find $(P)/$(GENDOC)/doxygen -type f -exec sed -i 's/%GENDOC/$(P)\/$(GENDOC)/g' {} \;
	find $(P)/$(GENDOC)/doxygen -type f -exec sed -i 's/%LOGO/$(P)\/$(LOGO)/g' {} \;
	find $(P)/$(GENDOC)/doxygen -type f -exec sed -i 's/%INPUT/$(P)\/$(DOXY_INPUT)/g' {} \;
	mv $(P)/$(GENDOC)/doxygen/Doxyfile $(P)/Doxyfile
endef

###################################################
# Define the list of MyMakefile files. Changing them
# make recompile the whole project $(P)/Makefile.common
# is optional.
#
MYMAKEFILES := $(M)/Makefile.header $(M)/Makefile.footer $(M)/Makefile.color	\
$(M)/Makefile.help $(M)/Makefile.flags $(M)/Makefile.macros

ifneq (,$(wildcard ./Makefile))
MYMAKEFILES += ./Makefile
endif
ifneq (,$(wildcard $(P)/Makefile))
MYMAKEFILES += $(P)/Makefile
endif
ifneq (,$(wildcard $(P)/Makefile.common))
MYMAKEFILES += $(P)/Makefile.common
endif
