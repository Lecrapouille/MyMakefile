# -*- mode: makefile -*-
##=====================================================================
## MyMakefile a generic Makefiles for compiling my github projects.
## Copyright 2019 Quentin Quadrat <lecrapouille@gmail.com>
##
## This file is part of MyMakefile.
##
## MyMakefile is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with MyMakefile.  If not, see <http://www.gnu.org/licenses/>.
##=====================================================================

include $(M)/Makefile.color

###################################################
# Get the project version. Can be used for creating
# shared libraries.
#
TARGET_VERSION := $(shell cat $(P)/VERSION)
TARGET_MAJOR_VERSION := $(shell cat $(P)/VERSION | cut -d"." -f1)
TARGET_MINOR_VERSION := $(shell cat $(P)/VERSION | cut -d"." -f2)

###################################################
# Get project and target names in lower case
#
PROJECT_LOWER_CASE := $(shell echo $(PROJECT) | tr A-Z a-z)
TARGET_LOWER_CASE := $(shell echo $(TARGET) | tr A-Z a-z)

###################################################
# Define names for static and shared libraries.
#
LIB_TARGET := lib$(TARGET_LOWER_CASE)
SHORT_LIB_TARGET := -l$(TARGET_LOWER_CASE)
SYMBOLIC_SHARED_LIB_TARGET := $(LIB_TARGET).$(SO).$(TARGET_MAJOR_VERSION)
SHARED_LIB_TARGET := $(SYMBOLIC_SHARED_LIB_TARGET).$(TARGET_MINOR_VERSION)
SYMBOLIC_STATIC_LIB_TARGET := $(LIB_TARGET).a
STATIC_LIB_TARGET := $(SYMBOLIC_STATIC_LIB_TARGET).$(TARGET_VERSION)

###################################################
# Define names for pkg-config file
#
PKG_DIR := /usr/lib/pkgconfig
PKG_FILE := $(TARGET_LOWER_CASE)-$(TARGET_VERSION).pc
SYMBOLIC_PKG_FILE := $(TARGET_LOWER_CASE).pc

###################################################
# Define where to install exec, data, libraries,
# documentation ...
#
BINDIR := $(DESTDIR)$(PREFIX)/bin
LIBDIR := $(DESTDIR)$(PREFIX)/lib
DATADIR := $(DESTDIR)$(PREFIX)/share
INCLDIR := $(DESTDIR)$(PREFIX)/include/$(PROJECT)-$(TARGET_VERSION)

###################################################
# TODO to be cleaned
#
PROJECT_EXE := $(BINDIR)/$(TARGET)-$(TARGET_VERSION)
PROJECT_DATA_ROOT := $(DATADIR)/$(PROJECT)/$(TARGET_VERSION)
PROJECT_DATA_PATH := $(PROJECT_DATA_ROOT)/data
PROJECT_DOC_PATH := $(PROJECT_DATA_ROOT)/$(GENDOC)

###################################################
# Define and configure the tool asan
#
ifeq ($(USE_ASAN),1)
SANITIZER := ASAN_OPTIONS=symbolize=1 ASAN_SYMBOLIZER_PATH=$(shell which llvm-symbolizer)
endif

###################################################
# Path where to store the generated coverage docs
#
COVERAGE_DIR := $(P)/$(GENDOC)/coverage

###################################################
# Path where to store lcov rapport
#
COVERAGE_RAPPORT := $(BUILD)/rapport.info

###################################################
# Store files dependencies in *.d files: when a file
# is modified this will compile others which depend
# on it.
#
DEPFLAGS = -MT $@ -MMD -MP -MF $(BUILD)/$*.Td
POSTCOMPILE = mv -f $(BUILD)/$*.Td $(BUILD)/$*.d

###################################################
# Install documentation
#
define RULE_INSTALL_DOC
	@$(call print-to,"Installing","doc","$(PROJECT_DATA_ROOT)","")
	@cd $(GENDOC) && for d in `find . -type d`; do install -d --mode 755 "$$d" "$(PROJECT_DOC_PATH)/$$d"; done
	@cd $(GENDOC) && for f in `find . -type f`; do install -D --mode 644 "$$f" "$(PROJECT_DOC_PATH)/$$f"; done
	@install -m 644 AUTHORS LICENSE README.md ChangeLog $(PROJECT_DATA_ROOT)
endef

###################################################
# Install static and dynamic libraries
#
define RULE_INSTALL_LIBRARIES
	@$(call print-to,"Installing","libs","$(LIBDIR)","")
	@install -m 644 $(BUILD)/$(STATIC_LIB_TARGET) $(LIBDIR)
	@ln -snf $(LIBDIR)/$(STATIC_LIB_TARGET) $(LIBDIR)/$(SYMBOLIC_STATIC_LIB_TARGET)
	@install -m 644 $(BUILD)/$(SHARED_LIB_TARGET) $(LIBDIR)
	@ln -snf $(LIBDIR)/$(SHARED_LIB_TARGET) $(LIBDIR)/$(SYMBOLIC_SHARED_LIB_TARGET)
	@ln -snf $(LIBDIR)/$(SYMBOLIC_SHARED_LIB_TARGET) $(LIBDIR)/$(LIB_TARGET).$(SO)
endef

###################################################
# Install .h and .hpp include files
#
define RULE_INSTALL_HEADER_FILES
	@$(call print-to,"Installing","headers","$(INCLDIR)","")
	@cd include && for d in `find . -type d`; do install -d --mode 755 "$$d" "$(INCLDIR)/$$d"; done
	@cd include && for f in `find . -type f`; do install -D --mode 644 "$$f" "$(INCLDIR)/$$f"; done
endef

###################################################
# Install the pkg-config file
#
define RULE_INSTALL_PKG_CONFIG
	@$(call print-to,"Installing","pkg-config","/usr/lib/pkgconfig","")
	@install -m 644 $(BUILD)/$(PKG_FILE) $(PKG_DIR)
	@ln -snf $(PKG_DIR)/$(PKG_FILE) $(PKG_DIR)/$(SYMBOLIC_PKG_FILE)
endef

###################################################
# Define the list of MyMakefile files. Changing them
# make recompile the whole project
#
MYMAKEFILES := $(P)/Makefile $(P)/Makefile.common $(M)/Makefile.header		\
$(M)/Makefile.footer $(M)/Makefile.color $(M)/Makefile.help $(M)/Makefile.flags	\
$(M)/Makefile.macros
